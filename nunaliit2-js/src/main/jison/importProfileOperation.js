/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var importProfileOperation = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,4],$V1=[1,7],$V2=[1,8],$V3=[5,7,9,10,12,13,14,15,16,17,18,19,25,26,27,28,29,30,31,33,34],$V4=[1,10],$V5=[1,11],$V6=[1,13],$V7=[1,14],$V8=[1,15],$V9=[1,16],$Va=[1,19],$Vb=[1,20],$Vc=[1,21],$Vd=[1,22],$Ve=[1,23],$Vf=[1,24],$Vg=[1,25],$Vh=[1,26],$Vi=[1,27],$Vj=[1,28],$Vk=[1,29],$Vl=[1,30],$Vm=[1,31],$Vn=[5,9,10,13,14,15,16,17,18,19,25,26,27,28,29,30,34],$Vo=[5,9,10,13,30,34],$Vp=[5,9,10,13,14,15,16,17,18,19,30,34],$Vq=[5,9,10,13,14,15,16,17,18,19,25,26,30,34];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"program":3,"operation":4,"EOF":5,"identifier":6,"=":7,"value":8,"&&":9,"||":10,"!":11,"(":12,")":13,"==":14,"!=":15,">=":16,"<=":17,">":18,"<":19,"arguments":20,"true":21,"false":22,"NUMBER":23,"STRING":24,"+":25,"-":26,"*":27,"/":28,"%":29,",":30,".":31,"VAR_NAME":32,"[":33,"]":34,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",7:"=",9:"&&",10:"||",11:"!",12:"(",13:")",14:"==",15:"!=",16:">=",17:"<=",18:">",19:"<",21:"true",22:"false",23:"NUMBER",24:"STRING",25:"+",26:"-",27:"*",28:"/",29:"%",30:",",31:".",32:"VAR_NAME",33:"[",34:"]"},
productions_: [0,[3,2],[4,3],[8,3],[8,3],[8,2],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,3],[8,4],[8,1],[8,1],[8,1],[8,1],[8,1],[8,3],[8,3],[8,3],[8,3],[8,3],[20,3],[20,1],[6,3],[6,4],[6,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return $$[$0-1]; 
break;
case 2:

        	this.$ = new OpAssignment($$[$0-2],$$[$0]);
        
break;
case 3:

        	this.$ = new Expression($$[$0-2],'&&',$$[$0]);
        
break;
case 4:

        	this.$ = new Expression($$[$0-2],'||',$$[$0]);
        
break;
case 5:

        	this.$ = new Expression($$[$0],'!');
        
break;
case 6:

    		this.$ = $$[$0-1];
    	
break;
case 7:

        	this.$ = new Comparison($$[$0-2],$$[$0],'==');
        
break;
case 8:

        	this.$ = new Comparison($$[$0-2],$$[$0],'!=');
        
break;
case 9:

        	this.$ = new Comparison($$[$0-2],$$[$0],'>=');
        
break;
case 10:

        	this.$ = new Comparison($$[$0-2],$$[$0],'<=');
        
break;
case 11:

        	this.$ = new Comparison($$[$0-2],$$[$0],'>');
        
break;
case 12:

        	this.$ = new Comparison($$[$0-2],$$[$0],'<');
        
break;
case 13:

        	this.$ = new FunctionCall($$[$0-2],null);
        
break;
case 14:

        	this.$ = new FunctionCall($$[$0-3],$$[$0-1]);
        
break;
case 15:

        	this.$ = $$[$0];
        
break;
case 16:

    		this.$ = new Literal(true);
    	
break;
case 17:

    		this.$ = new Literal(false);
    	
break;
case 18:

    		this.$ = new Literal(1 * $$[$0]);
    	
break;
case 19:

    		this.$ = new Literal($$[$0]);
    	
break;
case 20:

    		this.$ = new MathOp($$[$0-2],$$[$0],'+');
    	
break;
case 21:

    		this.$ = new MathOp($$[$0-2],$$[$0],'-');
    	
break;
case 22:

    		this.$ = new MathOp($$[$0-2],$$[$0],'*');
    	
break;
case 23:

    		this.$ = new MathOp($$[$0-2],$$[$0],'/');
    	
break;
case 24:

    		this.$ = new MathOp($$[$0-2],$$[$0],'%');
    	
break;
case 25:

        	this.$ = new Arguments($$[$0-2],$$[$0]);
        
break;
case 26:

        	this.$ = new Arguments($$[$0]);
        
break;
case 27:

        	var id = new Literal($$[$0]);
        	this.$ = new ObjectSelector(id,$$[$0-2]);
        
break;
case 28:

        	this.$ = new ObjectSelector($$[$0-1],$$[$0-3]);
        
break;
case 29:

        	this.$ = new Variable($$[$0]);
        
break;
}
},
table: [{3:1,4:2,6:3,32:$V0},{1:[3]},{5:[1,5]},{7:[1,6],31:$V1,33:$V2},o($V3,[2,29]),{1:[2,1]},{6:12,8:9,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},{32:[1,17]},{6:12,8:18,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},{5:[2,2],9:$Va,10:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,25:$Vi,26:$Vj,27:$Vk,28:$Vl,29:$Vm},{6:12,8:32,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},{6:12,8:33,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},o($Vn,[2,15],{12:[1,34],31:$V1,33:$V2}),o($Vn,[2,16]),o($Vn,[2,17]),o($Vn,[2,18]),o($Vn,[2,19]),o($V3,[2,27]),{9:$Va,10:$Vb,14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,25:$Vi,26:$Vj,27:$Vk,28:$Vl,29:$Vm,34:[1,35]},{6:12,8:36,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},{6:12,8:37,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},{6:12,8:38,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},{6:12,8:39,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},{6:12,8:40,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},{6:12,8:41,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},{6:12,8:42,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},{6:12,8:43,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},{6:12,8:44,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},{6:12,8:45,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},{6:12,8:46,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},{6:12,8:47,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},{6:12,8:48,11:$V4,12:$V5,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},o($Vn,[2,5]),{9:$Va,10:$Vb,13:[1,49],14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,25:$Vi,26:$Vj,27:$Vk,28:$Vl,29:$Vm},{6:12,8:52,11:$V4,12:$V5,13:[1,50],20:51,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},o($V3,[2,28]),o($Vo,[2,3],{14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,25:$Vi,26:$Vj,27:$Vk,28:$Vl,29:$Vm}),o($Vo,[2,4],{14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,25:$Vi,26:$Vj,27:$Vk,28:$Vl,29:$Vm}),o($Vp,[2,7],{25:$Vi,26:$Vj,27:$Vk,28:$Vl,29:$Vm}),o($Vp,[2,8],{25:$Vi,26:$Vj,27:$Vk,28:$Vl,29:$Vm}),o($Vp,[2,9],{25:$Vi,26:$Vj,27:$Vk,28:$Vl,29:$Vm}),o($Vp,[2,10],{25:$Vi,26:$Vj,27:$Vk,28:$Vl,29:$Vm}),o($Vp,[2,11],{25:$Vi,26:$Vj,27:$Vk,28:$Vl,29:$Vm}),o($Vp,[2,12],{25:$Vi,26:$Vj,27:$Vk,28:$Vl,29:$Vm}),o($Vq,[2,20],{27:$Vk,28:$Vl,29:$Vm}),o($Vq,[2,21],{27:$Vk,28:$Vl,29:$Vm}),o($Vn,[2,22]),o($Vn,[2,23]),o($Vn,[2,24]),o($Vn,[2,6]),o($Vn,[2,13]),{13:[1,53]},{9:$Va,10:$Vb,13:[2,26],14:$Vc,15:$Vd,16:$Ve,17:$Vf,18:$Vg,19:$Vh,25:$Vi,26:$Vj,27:$Vk,28:$Vl,29:$Vm,30:[1,54]},o($Vn,[2,14]),{6:12,8:52,11:$V4,12:$V5,20:55,21:$V6,22:$V7,23:$V8,24:$V9,32:$V0},{13:[2,25]}],
defaultActions: {5:[2,1],55:[2,25]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};


function compare(obj1, obj2){
	// Deals with null == null, undefined == undefined, same
	// strings or numbers
	if( obj1 === obj2 ) return 0;

	// Testing for different types
	if( typeof obj1 !== typeof obj2 ){
		if( typeof obj1 < typeof obj2 ) return -1;
		return 1;
	};
	
	// From this point, both objects have the same type and are not identical
	
	if( typeof obj1 === 'string' 
	 || typeof obj1 === 'number' ){
	 	if( obj1 < obj2 ) return -1;
	 	return 1;
	};

	if( typeof obj1 === 'boolean'){
	 	if( obj2 ) return -1;
	 	return 1;
	};

	if( typeof obj1 === 'function'){
		var src1 = obj1.toString();
		var src2 = obj2.toString();
	 	if( src1 < src2 ) return -1;
	 	if( src1 > src2 ) return 1;
	 	return 0;
	};
	
	// Deal with arrays
	if( $n2.isArray(obj1) && $n2.isArray(obj2) ){
		var refSets = true;
		obj1.forEach(function(elem){
			if( !elem ) {
				refSets = false;
			} else if( elem.nunaliit_type !== 'reference' ) {
				refSets = false;
			};
		});
		obj2.forEach(function(elem){
			if( !elem ) {
				refSets = false;
			} else if( elem.nunaliit_type !== 'reference' ) {
				refSets = false;
			};
		});
		
		if( refSets ){
			return compareReferenceSets(obj1, obj2);
		};
		
		return compareArrays(obj1, obj2)
		
	} else if( $n2.isArray(obj1) && !$n2.isArray(obj2) ){
		return -1;
	} else if( !$n2.isArray(obj1) && $n2.isArray(obj2) ){
		return 1;
	};
	
	// At this point, we should be left with two objects
	
	if( obj1.nunaliit_type === 'reference'
	 && obj2.nunaliit_type === 'reference' ){
	 	return compareReferences(obj1,obj2);
	};

	// Compare properties
	var propNameMap = {};
	for(var key in obj1){
		propNameMap[key] = true;
	};
	for(var key in obj2){
		propNameMap[key] = true;
	};
	var propNames = [];
	for(var key in propNameMap){
		propNames.push(key);
	};
	propNames.sort();
	for(var i=0; i<propNames.length; ++i){
		var propName = propNames[i];
		var prop1 = obj1[propName];
		var prop2 = obj2[propName];
		var c = compare(prop1, prop2);
		if( 0 !== c ){
			return c;
		};
	};
	
	return 0; 
};

function compareArrays(arr1, arr2){
	if( arr1.length > arr2.length ){
		return 1;
	} else if( arr1.length < arr2.length ){
		return -1;
	};
	
	for(var i=0; i<arr1.length; ++i){
		var c = compare(arr1[i], arr2[i]);
		if( 0 !== c ){
			return c;
		};
	};
	
	return 0;
};

function compareReferences(ref1, ref2){
	if( ref1 === ref2 ) return 0; // null == null and undefined == undefined
	if( !ref1 ) return -1;
	if( !ref2 ) return 1;
	if( ref1.doc === ref2.doc ) return 0;
	if( typeof ref1.doc === 'undefined' || ref1.doc === null ) return -1; 
	if( typeof ref2.doc === 'undefined' || ref2.doc === null ) return 1;
	if( ref1.doc < ref2.doc ) return -1; 
	if( ref1.doc > ref2.doc ) return 1;
	return 0; 
};

function compareReferenceSets(set1, set2){
	if( set1 === set2 ) return 0; // null == null and undefined == undefined
	if( !set1 ) return -1;
	if( !set2 ) return 1;
	
	var map1 = {};
	set1.forEach(function(ref){
		if( ref
		 && typeof ref.doc === 'string' ){
			map1[ref.doc] = true;
		};
	});

	var map2 = {};
	set2.forEach(function(ref){
		if( ref
		 && typeof ref.doc === 'string' ){
			map2[ref.doc] = true;
		};
	});
	
	for(var docId in map1){
		if( !map2[docId] ){
			return -1;
		};
	};

	for(var docId in map2){
		if( !map1[docId] ){
			return 1;
		};
	};

	return 0; 
};

// Functions in the global space receives the context object
// as 'this'.
var global = {
};
parser.global = global;

// -----------------------------------------------------------
var OpAssignment = function(leftop, rightop){
	this.leftop = leftop;
	this.rightop = rightop;
};
OpAssignment.prototype.configure = function(opts){
	if( this.identifier 
	 && typeof this.identifier.configure === 'function' ){
	 	this.identifier.configure(opts);
	};
	if( this.rightop 
	 && typeof this.rightop.configure === 'function' ){
	 	this.rightop.configure(opts);
	};
};
OpAssignment.prototype.reportCopyOperations = function(opts){
	var _this = this;
	
	var importData = opts.importEntry.getProperties();
	var lastImportData = opts.lastImportEntry.getProperties();

	var propertyNameMap = {};
	var updatedValue = undefined;
	var lastValue = undefined;
	var targetValue = undefined;
	var targetSelector = undefined;

	// compute new value	
	var ctxt = {
		variables:{
			doc: opts.doc,
			'import': importData
		},
		propertyNameMap: propertyNameMap
	};
	this.rightop.getValue(ctxt, receiveUpdatedValue, processError);

	function processError(err){
		// On error, do not add any copy operations
		opts.onSuccess([]);
	};

	function receiveUpdatedValue(v){
		// save
		updatedValue = v;

		// recompute last imported value
		var ctxt2 = {
			variables:{
				doc: opts.doc,
				'import': lastImportData // based on last import
			}
		};
		_this.rightop.getValue(ctxt2, receiveLastValue, processError);
	};

	function receiveLastValue(v){
		// save
		lastValue = v;

		// get current target value
		var ctxt3 = {
			variables:{
				doc: opts.doc
				// do not include import data, as it should not
				// influence getting the current value
			}
		};
		_this.leftop.getValue(ctxt3, receiveTargetValue, processError);
	};

	function receiveTargetValue(v){
		// save
		targetValue = v;

		// get target selector
		var ctxt3 = {
			variables:{
				doc: opts.doc
				// do not include import data, as it should not
				// influence getting the target selector
			}
		};
		_this.leftop.getObjectSelector(ctxt3, receiveTargetSelector, processError);
	};

	function receiveTargetSelector(v){
		// save
		targetSelector = v;

		var isEqual = false;
		if( 0 === compare(targetValue, updatedValue) ){
			isEqual = true;
		};

		var changedSinceLastImport = true;
		if( 0 === compare(targetValue, lastValue) ){
			changedSinceLastImport = false;
		};
	
		var inputPropertyNames = [];
		for(var propertyName in propertyNameMap){
			inputPropertyNames.push(propertyName);
		};
	
		var copyOperation = {
			propertyNames: inputPropertyNames
			,computedValue: updatedValue
			,targetSelector: targetSelector
			,targetValue: targetValue
			,isEqual: isEqual
			,changedSinceLastImport: changedSinceLastImport
		};	
	
		opts.onSuccess([copyOperation]);
	};
};
OpAssignment.prototype.performCopyOperation = function(opts_){
	var opts = $n2.extend({
		doc: null
		,importEntry: null
		,copyOperation: null
	},opts_);
	
	var doc = opts.doc;
	var copyOperation = opts.copyOperation;
	var computedValue = copyOperation.computedValue;
	var targetSelector = copyOperation.targetSelector;
	
	if( typeof computedValue === 'undefined' ){
		targetSelector.removeValue(doc);
	} else {
		targetSelector.setValue(doc, computedValue, true);
	};
};

// -----------------------------------------------------------
var FunctionCall = function(value, args){
	this.value = value;
	this.args = args;
};
FunctionCall.prototype.getValue = function(ctxt, success, error){
	var _this = this;

	// Accumulate all the values from arguments
	var argValues = [onComplete, error];
	if( this.args ){
		this.args.pushValuesOnArray(ctxt, argValues, getFunction, error);
	} else {
		// No arguments, go directly to function
		getFunction();
	};

	function getFunction(){
		_this.value.getValue(
			ctxt,
			function(value){
				if( typeof value === 'function' ){
					value.apply(ctxt, argValues);
				} else {
					// Not a function. Return undefined
					onComplete(undefined);
				};
			},
			error
		);
	};
	
	function onComplete(res){
		success(res);
	};
};

// -----------------------------------------------------------
// Arguments
var Arguments = function(a1, a2){
	this.valueNode = a1;
	if( a2 ){
		this.nextArgument = a2;
	} else {
		this.nextArgument = null;
	};
};
Arguments.prototype.pushValuesOnArray = function(ctxt, array, success, error){
	var _this = this;

	this.valueNode.getValue(
		ctxt,
		function(value){
			array.push(value);
			
			if( _this.nextArgument ){
				_this.nextArgument.pushValuesOnArray(ctxt, array, success, error);
			} else {
				success();
			};
		},
		error
	);
};

// -----------------------------------------------------------
var Expression = function(n1, op, n2){
	this.n1 = n1;
	this.n2 = n2;
	this.op = op;
};
Expression.prototype.getValue = function(ctxt, success, error){
	var _this = this;
	this.n1.getValue(
		ctxt,
		function(r1){
			if( _this.n2 ){
				this.n2.getValue(
					ctxt,
					function(r2){
						compute(r1,r2);
					},
					error
				);
			} else {
				compute(r1,undefined);
			};
		},
		error
	);
	
	function compute(r1,r2){
		if( '!' === this.op ){
			success( !r1 );
			
		} else if( '&&' === this.op ){
			success(r1 && r2);
			
		} else if( '||' === this.op ){
			success(r1 || r2);

		} else {
			success(false);
		};
	};
};

// -----------------------------------------------------------
var Literal = function(value){
	this.value = value;
};
Literal.prototype.getValue = function(ctxt, success, error){
	success(this.value);
};

// -----------------------------------------------------------
var Comparison = function(leftNode, rightNode, op){
	this.leftNode = leftNode;
	this.rightNode = rightNode;
	this.op = op;
};
Comparison.prototype.getValue = function(ctxt, success, error){
	var _this = this;

	this.leftNode.getValue(
		ctxt,
		function(left){
			_this.rightNode.getValue(
				ctxt,
				function(right){
					if( '==' === _this.op ){
						success(left == right);
				
					} else if( '!=' === _this.op ){
						success(left != right);
				
					} else if( '>=' === _this.op ){
						success(left >= right);
				
					} else if( '<=' === _this.op ){
						success(left <= right);
				
					} else if( '>' === _this.op ){
						success(left > right);
				
					} else if( '<' === _this.op ){
						success(left < right);
		
					} else {
						success(false);
					};
				},
				error
			);
		},
		error
	);
};

// -----------------------------------------------------------
var MathOp = function(leftNode, rightNode, op){
	this.leftNode = leftNode;
	this.rightNode = rightNode;
	this.op = op;
};
MathOp.prototype.getValue = function(ctxt, success, error){
	var _this = this;

	this.leftNode.getValue(
		ctxt,
		function(left){
			_this.rightNode.getValue(
				ctxt,
				function(right){
					if( '+' === _this.op ){
						success(left + right);
				
					} else if( '-' === _this.op ){
						success(left - right);
				
					} else if( '*' === _this.op ){
						success(left * right);
				
					} else if( '/' === _this.op ){
						success(left / right);
				
					} else if( '%' === _this.op ){
						success(left % right);
		
					} else {
						success(0);
					};
				},
				error
			);
		},
		error
	);
};

// -----------------------------------------------------------
var ObjectSelector = function(id, previousSelector){
	this.idNode = id;
	this.previousSelector = previousSelector;
};
ObjectSelector.prototype.getValue = function(ctxt, success, error){
	var _this = this;
	this.previousSelector.getValue(
		ctxt, 
		function(obj){
			if( typeof obj === 'object' ){
				_this.idNode.getValue(
					ctxt,
					function(id){
						if( typeof id === 'undefined' ){
							success(undefined);
						} else {
							// Capture references to 'import' data
							if( _this.previousSelector.isVariable 
							 && _this.previousSelector.variableName === 'import' ){
							 	if( ctxt.propertyNameMap ){
							 		ctxt.propertyNameMap[id] = true;
							 	};
							};
							
							success( obj[id] );
						};
						
					},
					error
				);
			} else {
				success(undefined);
			};
		},
		error
	);
};
ObjectSelector.prototype.getObjectSelector = function(ctxt, success, error){
	var _this = this;
	this.previousSelector.getObjectSelector(
		ctxt,
		function(parentSel){
			_this.idNode.getValue(
				ctxt,
				function(id){
					var childSel = parentSel.getChildSelector(id);
					success(childSel);
				},
				error
			);
		},
		error
	);
};

// -----------------------------------------------------------
var Variable = function(variableName){
	this.isVariable = true; // marker
	this.variableName = variableName;
};
Variable.prototype.getValue = function(ctxt, success, error){
	var obj = undefined;
	
	if( ctxt 
	 && ctxt.variables 
	 && ctxt.variables[this.variableName] ) {
		obj = ctxt.variables[this.variableName];
		
	} else if( global && global[this.variableName] ) {
		obj = global[this.variableName];
	};
	
	success(obj);
};
Variable.prototype.getObjectSelector = function(ctxt, success, error){
	var sel = new $n2.objectSelector.ObjectSelector([]);
	success( sel );
};


/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0: /* skip whitespace */ 
break;
case 1: return 21; 
break;
case 2: return 22; 
break;
case 3: return 23; 
break;
case 4: return 32; 
break;
case 5: yy_.yytext = yy_.yytext.substr(1,yy_.yytext.length-2); return 24; 
break;
case 6: return 14; 
break;
case 7: return 15; 
break;
case 8: return 16; 
break;
case 9: return 17; 
break;
case 10: return 18; 
break;
case 11: return 19; 
break;
case 12: return 12; 
break;
case 13: return 13; 
break;
case 14: return '{'; 
break;
case 15: return '}'; 
break;
case 16: return 33; 
break;
case 17: return 34; 
break;
case 18: return 30; 
break;
case 19: return 31; 
break;
case 20: return 11; 
break;
case 21: return 25; 
break;
case 22: return 26; 
break;
case 23: return 27; 
break;
case 24: return 28; 
break;
case 25: return 29; 
break;
case 26: return 7; 
break;
case 27: return 9; 
break;
case 28: return 10; 
break;
case 29: return 5; 
break;
case 30: return 'INVALID'; 
break;
}
},
rules: [/^(?:\s+)/,/^(?:true\b)/,/^(?:false\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:[_a-zA-Z][_a-zA-Z0-9]*)/,/^(?:'(\\'|[^'])*')/,/^(?:==)/,/^(?:!=)/,/^(?:>=)/,/^(?:<=)/,/^(?:>)/,/^(?:<)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:\[)/,/^(?:\])/,/^(?:,)/,/^(?:\.)/,/^(?:!)/,/^(?:\+)/,/^(?:-)/,/^(?:\*)/,/^(?:\/)/,/^(?:%)/,/^(?:=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = importProfileOperation;
exports.Parser = importProfileOperation.Parser;
exports.parse = function () { return importProfileOperation.parse.apply(importProfileOperation, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}